
RKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d14  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f2c  08003f2c  00005084  2**0
                  CONTENTS
  4 .ARM          00000008  08003f2c  08003f2c  00004f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f34  08003f34  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f34  08003f34  00004f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f38  08003f38  00004f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003f3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000084  08003fc0  00005084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08003fc0  0000534c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de0d  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f7  00000000  00000000  00012ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00014fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a11  00000000  00000000  00015ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a0c  00000000  00000000  000166b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f37c  00000000  00000000  0002d0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e059  00000000  00000000  0003c439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  000ca4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000035  00000000  00000000  000cdab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003e94 	.word	0x08003e94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	08003e94 	.word	0x08003e94

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ConstructCircleBuffer>:
#include "circle_buffer.h"

void ConstructCircleBuffer(CircleBuffer* buffer, uint8_t *data_buf, uint32_t size)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
    buffer->data_ = data_buf;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	68ba      	ldr	r2, [r7, #8]
 80004d8:	601a      	str	r2, [r3, #0]
    buffer->head_ = 0;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
    buffer->tail_ = 0;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
    buffer->max_len_ = size;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	60da      	str	r2, [r3, #12]

}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <GetDataSizeCircleBuffer>:
    buffer->head_ = 0;
    buffer->tail_ = 0;
}

uint32_t GetDataSizeCircleBuffer(CircleBuffer* buffer)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
    if(buffer->head_ == buffer->tail_)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	429a      	cmp	r2, r3
 800050a:	d101      	bne.n	8000510 <GetDataSizeCircleBuffer+0x18>
    {
        return 0;
 800050c:	2300      	movs	r3, #0
 800050e:	e013      	b.n	8000538 <GetDataSizeCircleBuffer+0x40>
    }
    else if(buffer->head_ > buffer->tail_)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	685a      	ldr	r2, [r3, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	429a      	cmp	r2, r3
 800051a:	d905      	bls.n	8000528 <GetDataSizeCircleBuffer+0x30>
    {
        return buffer->head_ - buffer->tail_;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	685a      	ldr	r2, [r3, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	e007      	b.n	8000538 <GetDataSizeCircleBuffer+0x40>
    }
    else
    {
        return (buffer->max_len_ - buffer->tail_) + buffer->head_;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	68da      	ldr	r2, [r3, #12]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	1ad2      	subs	r2, r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	4413      	add	r3, r2
    }
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <PushDataCircleBuffer>:

uint8_t PushDataCircleBuffer(CircleBuffer* buffer, uint8_t data)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
    uint32_t next = buffer->head_ + 1;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
    if(next >= buffer->max_len_)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	429a      	cmp	r2, r3
 8000560:	d301      	bcc.n	8000566 <PushDataCircleBuffer+0x22>
    {
        next = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
    }

    if(next == buffer->tail_)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	429a      	cmp	r2, r3
 800056e:	d101      	bne.n	8000574 <PushDataCircleBuffer+0x30>
    {
        return 1; //The buffer is full
 8000570:	2301      	movs	r3, #1
 8000572:	e00a      	b.n	800058a <PushDataCircleBuffer+0x46>
    }
    else
    {
        buffer->data_[buffer->head_] = data;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4413      	add	r3, r2
 800057e:	78fa      	ldrb	r2, [r7, #3]
 8000580:	701a      	strb	r2, [r3, #0]
        buffer->head_ = next;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	605a      	str	r2, [r3, #4]
        return 0;
 8000588:	2300      	movs	r3, #0
    }
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <PopDataCircleBuffer>:

uint8_t PopDataCircleBuffer(CircleBuffer* buffer, uint8_t *data)
{
 8000596:	b480      	push	{r7}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
    if(buffer->head_ == buffer->tail_)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d101      	bne.n	80005b0 <PopDataCircleBuffer+0x1a>
    {
        return 1; //The buffer is empty
 80005ac:	2301      	movs	r3, #1
 80005ae:	e016      	b.n	80005de <PopDataCircleBuffer+0x48>
    }
    else
    {
        uint32_t next = buffer->tail_ + 1;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
        if(next >= buffer->max_len_)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d301      	bcc.n	80005c6 <PopDataCircleBuffer+0x30>
        {
            next = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
        }
        *data = buffer->data_[buffer->tail_];
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	4413      	add	r3, r2
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	701a      	strb	r2, [r3, #0]
        buffer->tail_ = next;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	609a      	str	r2, [r3, #8]
        return 0;
 80005dc:	2300      	movs	r3, #0
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <SetPin>:
#include "command_handl.h"

uint32_t SetPin(uint8_t *data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if(*data == 11)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b0b      	cmp	r3, #11
 80005fa:	d106      	bne.n	800060a <SetPin+0x1e>
	{
		//Set
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000602:	4807      	ldr	r0, [pc, #28]	@ (8000620 <SetPin+0x34>)
 8000604:	f001 f8c6 	bl	8001794 <HAL_GPIO_WritePin>
 8000608:	e005      	b.n	8000616 <SetPin+0x2a>
	}
	else
	{
		//Reset
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <SetPin+0x34>)
 8000612:	f001 f8bf 	bl	8001794 <HAL_GPIO_WritePin>
	}
	return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SetPWM>:
uint32_t SetPWM(uint8_t *data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if(*data == 3)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b03      	cmp	r3, #3
 8000632:	d10b      	bne.n	800064c <SetPWM+0x28>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000634:	2104      	movs	r1, #4
 8000636:	480f      	ldr	r0, [pc, #60]	@ (8000674 <SetPWM+0x50>)
 8000638:	f001 fdc6 	bl	80021c8 <HAL_TIM_PWM_Start>
		HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	@ 0x32
 800063e:	f000 fd5d 	bl	80010fc <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000642:	2104      	movs	r1, #4
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <SetPWM+0x50>)
 8000646:	f001 fe6f 	bl	8002328 <HAL_TIM_PWM_Stop>
 800064a:	e00e      	b.n	800066a <SetPWM+0x46>
	}
	else if (*data == 7)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b07      	cmp	r3, #7
 8000652:	d10a      	bne.n	800066a <SetPWM+0x46>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000654:	2104      	movs	r1, #4
 8000656:	4807      	ldr	r0, [pc, #28]	@ (8000674 <SetPWM+0x50>)
 8000658:	f001 fdb6 	bl	80021c8 <HAL_TIM_PWM_Start>
		HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	@ 0x64
 800065e:	f000 fd4d 	bl	80010fc <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000662:	2104      	movs	r1, #4
 8000664:	4803      	ldr	r0, [pc, #12]	@ (8000674 <SetPWM+0x50>)
 8000666:	f001 fe5f 	bl	8002328 <HAL_TIM_PWM_Stop>
	}

	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000a0 	.word	0x200000a0

08000678 <SetPWMX>:
uint32_t SetPWMX(uint8_t *data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	480a      	ldr	r0, [pc, #40]	@ (80006ac <SetPWMX+0x34>)
 8000684:	f001 fda0 	bl	80021c8 <HAL_TIM_PWM_Start>
	HAL_Delay(50 * (*data));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	2332      	movs	r3, #50	@ 0x32
 8000690:	fb02 f303 	mul.w	r3, r2, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fd31 	bl	80010fc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800069a:	2100      	movs	r1, #0
 800069c:	4803      	ldr	r0, [pc, #12]	@ (80006ac <SetPWMX+0x34>)
 800069e:	f001 fe43 	bl	8002328 <HAL_TIM_PWM_Stop>
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000a0 	.word	0x200000a0

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80006b4:	f000 fcb0 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f826 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 f934 	bl	8000928 <MX_GPIO_Init>
  MX_TIM3_Init();
 80006c0:	f000 f880 	bl	80007c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006c4:	f000 f904 	bl	80008d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //InitMCU();
  ConstructCircleBuffer(&buffer, data_buffer, sizeof(data_buffer) / sizeof(data_buffer[0]));
 80006c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006cc:	4909      	ldr	r1, [pc, #36]	@ (80006f4 <main+0x44>)
 80006ce:	480a      	ldr	r0, [pc, #40]	@ (80006f8 <main+0x48>)
 80006d0:	f7ff fefa 	bl	80004c8 <ConstructCircleBuffer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	4909      	ldr	r1, [pc, #36]	@ (80006fc <main+0x4c>)
 80006d8:	4809      	ldr	r0, [pc, #36]	@ (8000700 <main+0x50>)
 80006da:	f002 fc34 	bl	8002f46 <HAL_UART_Receive_IT>
  while (1)
  {
	if(is_message_stop_rec)
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <main+0x54>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0fb      	beq.n	80006de <main+0x2e>
	{
		is_message_stop_rec = 0;
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <main+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
		HandleRecivedData();
 80006ec:	f000 f96e 	bl	80009cc <HandleRecivedData>
	if(is_message_stop_rec)
 80006f0:	e7f5      	b.n	80006de <main+0x2e>
 80006f2:	bf00      	nop
 80006f4:	20000134 	.word	0x20000134
 80006f8:	20000334 	.word	0x20000334
 80006fc:	20000344 	.word	0x20000344
 8000700:	200000e8 	.word	0x200000e8
 8000704:	20000131 	.word	0x20000131

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fb90 	bl	8003e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <SystemClock_Config+0xb4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <SystemClock_Config+0xb4>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <SystemClock_Config+0xb4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <SystemClock_Config+0xb8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <SystemClock_Config+0xb8>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <SystemClock_Config+0xb8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f825 	bl	80017c8 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000784:	f000 f9de 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fa88 	bl	8001cb8 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ae:	f000 f9c9 	bl	8000b44 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	@ 0x38
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f4:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <MX_TIM3_Init+0x104>)
 80007f6:	4a35      	ldr	r2, [pc, #212]	@ (80008cc <MX_TIM3_Init+0x108>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007fa:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <MX_TIM3_Init+0x104>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <MX_TIM3_Init+0x104>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_TIM3_Init+0x104>)
 8000808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <MX_TIM3_Init+0x104>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <MX_TIM3_Init+0x104>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800081a:	482b      	ldr	r0, [pc, #172]	@ (80008c8 <MX_TIM3_Init+0x104>)
 800081c:	f001 fc2c 	bl	8002078 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000826:	f000 f98d 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000834:	4619      	mov	r1, r3
 8000836:	4824      	ldr	r0, [pc, #144]	@ (80008c8 <MX_TIM3_Init+0x104>)
 8000838:	f001 fe9c 	bl	8002574 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000842:	f000 f97f 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000846:	4820      	ldr	r0, [pc, #128]	@ (80008c8 <MX_TIM3_Init+0x104>)
 8000848:	f001 fc65 	bl	8002116 <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000852:	f000 f977 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4619      	mov	r1, r3
 8000864:	4818      	ldr	r0, [pc, #96]	@ (80008c8 <MX_TIM3_Init+0x104>)
 8000866:	f002 fa25 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000870:	f000 f968 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	@ 0x60
 8000876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0x7FFF;
 8000878:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800087c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	480e      	ldr	r0, [pc, #56]	@ (80008c8 <MX_TIM3_Init+0x104>)
 800088e:	f001 fdaf 	bl	80023f0 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000898:	f000 f954 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2204      	movs	r2, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <MX_TIM3_Init+0x104>)
 80008a4:	f001 fda4 	bl	80023f0 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80008ae:	f000 f949 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_MspInit(&htim3);
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_TIM3_Init+0x104>)
 80008b4:	f000 fa8e 	bl	8000dd4 <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <MX_TIM3_Init+0x104>)
 80008ba:	f000 faad 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 80008be:	bf00      	nop
 80008c0:	3738      	adds	r7, #56	@ 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000a0 	.word	0x200000a0
 80008cc:	40000400 	.word	0x40000400

080008d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MX_USART1_UART_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 8000908:	f002 fa42 	bl	8002d90 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f917 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_MspInit(&huart1);
 8000916:	4802      	ldr	r0, [pc, #8]	@ (8000920 <MX_USART1_UART_Init+0x50>)
 8000918:	f000 fab8 	bl	8000e8c <HAL_UART_MspInit>
  /* USER CODE END USART1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000e8 	.word	0x200000e8
 8000924:	40011000 	.word	0x40011000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a1f      	ldr	r2, [pc, #124]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a18      	ldr	r2, [pc, #96]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000998:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 800099a:	f000 fefb 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 80009b8:	f000 fd68 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400

080009cc <HandleRecivedData>:

/* USER CODE BEGIN 4 */
void HandleRecivedData()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
	Message msg;
	uint8_t data_handl[6] = {0};
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	2300      	movs	r3, #0
 80009d8:	813b      	strh	r3, [r7, #8]
	for(int i = 0; i < 6; ++i)
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e009      	b.n	80009f4 <HandleRecivedData+0x28>
	{
		PopDataCircleBuffer(&buffer, &data_handl[i]);
 80009e0:	1d3a      	adds	r2, r7, #4
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	4413      	add	r3, r2
 80009e6:	4619      	mov	r1, r3
 80009e8:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <HandleRecivedData+0x90>)
 80009ea:	f7ff fdd4 	bl	8000596 <PopDataCircleBuffer>
	for(int i = 0; i < 6; ++i)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	2b05      	cmp	r3, #5
 80009f8:	ddf2      	ble.n	80009e0 <HandleRecivedData+0x14>
	}
	if(!ParseAndCheckData(data_handl, &msg))
 80009fa:	f107 020c 	add.w	r2, r7, #12
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f942 	bl	8000c8c <ParseAndCheckData>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d121      	bne.n	8000a52 <HandleRecivedData+0x86>
	{
		for(int i = 0; i < NUMBER_OF_COMMANDS; ++i)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	e01b      	b.n	8000a4c <HandleRecivedData+0x80>
		{
			if(commands_array[i].command == msg.pack)
 8000a14:	4912      	ldr	r1, [pc, #72]	@ (8000a60 <HandleRecivedData+0x94>)
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4413      	add	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	440b      	add	r3, r1
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d10d      	bne.n	8000a46 <HandleRecivedData+0x7a>
			{
				commands_array[i].func(&(msg.data));
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <HandleRecivedData+0x94>)
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f107 020c 	add.w	r2, r7, #12
 8000a40:	3203      	adds	r2, #3
 8000a42:	4610      	mov	r0, r2
 8000a44:	4798      	blx	r3
		for(int i = 0; i < NUMBER_OF_COMMANDS; ++i)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	2b05      	cmp	r3, #5
 8000a50:	dde0      	ble.n	8000a14 <HandleRecivedData+0x48>
			}
		}
	}
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000334 	.word	0x20000334
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d157      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0xc0>
	{
		if(!is_message_start_rec)
 8000a74:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <HAL_UART_RxCpltCallback+0xcc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d12e      	bne.n	8000ada <HAL_UART_RxCpltCallback+0x76>
		{
			is_message_stop_rec = 0;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <HAL_UART_RxCpltCallback+0xd0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
			if(data == 0xA1)
 8000a82:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	2ba1      	cmp	r3, #161	@ 0xa1
 8000a88:	d106      	bne.n	8000a98 <HAL_UART_RxCpltCallback+0x34>
			{
				data = data << 8;
 8000a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000a94:	801a      	strh	r2, [r3, #0]
 8000a96:	e040      	b.n	8000b1a <HAL_UART_RxCpltCallback+0xb6>
			}
			else if (data == 0xA1A2)
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	f24a 12a2 	movw	r2, #41378	@ 0xa1a2
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d116      	bne.n	8000ad2 <HAL_UART_RxCpltCallback+0x6e>
			{
				is_message_start_rec = 1;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <HAL_UART_RxCpltCallback+0xcc>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
				PushDataCircleBuffer(&buffer, (data >> 8));
 8000aaa:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4821      	ldr	r0, [pc, #132]	@ (8000b3c <HAL_UART_RxCpltCallback+0xd8>)
 8000ab8:	f7ff fd44 	bl	8000544 <PushDataCircleBuffer>
				PushDataCircleBuffer(&buffer, data);
 8000abc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481d      	ldr	r0, [pc, #116]	@ (8000b3c <HAL_UART_RxCpltCallback+0xd8>)
 8000ac6:	f7ff fd3d 	bl	8000544 <PushDataCircleBuffer>
				data = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	801a      	strh	r2, [r3, #0]
 8000ad0:	e023      	b.n	8000b1a <HAL_UART_RxCpltCallback+0xb6>
			}
			else
			{
				data = 0;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	801a      	strh	r2, [r3, #0]
 8000ad8:	e01f      	b.n	8000b1a <HAL_UART_RxCpltCallback+0xb6>
			}
		}
		else if(!is_message_stop_rec)
 8000ada:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <HAL_UART_RxCpltCallback+0xd0>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d11b      	bne.n	8000b1a <HAL_UART_RxCpltCallback+0xb6>
		{
			PushDataCircleBuffer(&buffer, data);
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4814      	ldr	r0, [pc, #80]	@ (8000b3c <HAL_UART_RxCpltCallback+0xd8>)
 8000aec:	f7ff fd2a 	bl	8000544 <PushDataCircleBuffer>
			if(GetDataSizeCircleBuffer(&buffer) % 6 == 0)
 8000af0:	4812      	ldr	r0, [pc, #72]	@ (8000b3c <HAL_UART_RxCpltCallback+0xd8>)
 8000af2:	f7ff fd01 	bl	80004f8 <GetDataSizeCircleBuffer>
 8000af6:	4601      	mov	r1, r0
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_UART_RxCpltCallback+0xdc>)
 8000afa:	fba3 2301 	umull	r2, r3, r3, r1
 8000afe:	089a      	lsrs	r2, r3, #2
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	1aca      	subs	r2, r1, r3
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d105      	bne.n	8000b1a <HAL_UART_RxCpltCallback+0xb6>
			{
				is_message_stop_rec = 1;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_UART_RxCpltCallback+0xd0>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
				is_message_start_rec = 0;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_UART_RxCpltCallback+0xcc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4906      	ldr	r1, [pc, #24]	@ (8000b38 <HAL_UART_RxCpltCallback+0xd4>)
 8000b1e:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000b20:	f002 fa11 	bl	8002f46 <HAL_UART_Receive_IT>
	}
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000e8 	.word	0x200000e8
 8000b30:	20000130 	.word	0x20000130
 8000b34:	20000131 	.word	0x20000131
 8000b38:	20000344 	.word	0x20000344
 8000b3c:	20000334 	.word	0x20000334
 8000b40:	aaaaaaab 	.word	0xaaaaaaab

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <CalculateCheckSum>:
#include "message_handl.h"

uint8_t CalculateCheckSum(const uint8_t* data, uint8_t len)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
    uint8_t check_sum = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0;i < len; ++i)
 8000b60:	2300      	movs	r3, #0
 8000b62:	73bb      	strb	r3, [r7, #14]
 8000b64:	e009      	b.n	8000b7a <CalculateCheckSum+0x2a>
    {
        check_sum += data[i]; //& 0b00001111;
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	4413      	add	r3, r2
 8000b72:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0;i < len; ++i)
 8000b74:	7bbb      	ldrb	r3, [r7, #14]
 8000b76:	3301      	adds	r3, #1
 8000b78:	73bb      	strb	r3, [r7, #14]
 8000b7a:	7bba      	ldrb	r2, [r7, #14]
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3f1      	bcc.n	8000b66 <CalculateCheckSum+0x16>
        //check_sum += (data[i] >> 4);
    }
    return check_sum;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <CalculateCheckSumFromMsg>:

uint8_t CalculateCheckSumFromMsg(const Message* msg)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    uint8_t data[] = {(msg->pack >> 8), msg->pack, msg->data};
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	789b      	ldrb	r3, [r3, #2]
 8000b9c:	121b      	asrs	r3, r3, #8
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	733b      	strb	r3, [r7, #12]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	737b      	strb	r3, [r7, #13]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	78db      	ldrb	r3, [r3, #3]
 8000bac:	73bb      	strb	r3, [r7, #14]
    return CalculateCheckSum(data, sizeof(data)/sizeof(data[0]));
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffcb 	bl	8000b50 <CalculateCheckSum>
 8000bba:	4603      	mov	r3, r0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SendUART>:

void SendUART(uint8_t* data, size_t len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, data, len, 1);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <SendUART+0x20>)
 8000bd8:	f002 f92a 	bl	8002e30 <HAL_UART_Transmit>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000e8 	.word	0x200000e8

08000be8 <SendMsg>:

void SendMsg(const Message* msg)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    uint8_t tx_buffer[] = {msg->title >> 8, msg->title, msg->pack >> 8, msg->pack, msg->data, CalculateCheckSumFromMsg(msg)};
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	723b      	strb	r3, [r7, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	727b      	strb	r3, [r7, #9]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	789b      	ldrb	r3, [r3, #2]
 8000c08:	121b      	asrs	r3, r3, #8
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	72bb      	strb	r3, [r7, #10]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	789b      	ldrb	r3, [r3, #2]
 8000c12:	72fb      	strb	r3, [r7, #11]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	733b      	strb	r3, [r7, #12]
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb8 	bl	8000b90 <CalculateCheckSumFromMsg>
 8000c20:	4603      	mov	r3, r0
 8000c22:	737b      	strb	r3, [r7, #13]
    SendUART(tx_buffer, sizeof(tx_buffer)/sizeof(tx_buffer[0]));
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2106      	movs	r1, #6
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ffca 	bl	8000bc4 <SendUART>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SendGoodAnsMes>:

void SendGoodAnsMes(const Message* received_msg)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    Message AnsMsg = {
 8000c40:	f24a 13a2 	movw	r3, #41378	@ 0xa1a2
 8000c44:	81bb      	strh	r3, [r7, #12]
        .title = BASETITLE,
        .pack = received_msg->pack,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	789b      	ldrb	r3, [r3, #2]
    Message AnsMsg = {
 8000c4a:	73bb      	strb	r3, [r7, #14]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
        .data = 0
    };
    SendMsg(&AnsMsg);
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffc7 	bl	8000be8 <SendMsg>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <SendFailAnsMes>:

void SendFailAnsMes(const Message* received_msg)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
    Message AnsMsg = {
 8000c6a:	f24a 13a2 	movw	r3, #41378	@ 0xa1a2
 8000c6e:	81bb      	strh	r3, [r7, #12]
        .title = BASETITLE,
        .pack = received_msg->pack,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	789b      	ldrb	r3, [r3, #2]
    Message AnsMsg = {
 8000c74:	73bb      	strb	r3, [r7, #14]
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
        .data = 1
    };
    SendMsg(&AnsMsg);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffb2 	bl	8000be8 <SendMsg>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <ParseAndCheckData>:

uint8_t ParseAndCheckData(const uint8_t* data, Message* msg)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
    msg->title = (data[0] << 8) | data[1];
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	801a      	strh	r2, [r3, #0]
    msg->pack = (data[2] << 8) | data[3];
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b25a      	sxtb	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3303      	adds	r3, #3
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	709a      	strb	r2, [r3, #2]
    msg->data = data[4];
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	70da      	strb	r2, [r3, #3]
    uint8_t crc = data[5];
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3305      	adds	r3, #5
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	73fb      	strb	r3, [r7, #15]
    if(msg->title != BASETITLE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	f24a 12a2 	movw	r2, #41378	@ 0xa1a2
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d004      	beq.n	8000cf4 <ParseAndCheckData+0x68>
    {
        SendFailAnsMes(msg);
 8000cea:	6838      	ldr	r0, [r7, #0]
 8000cec:	f7ff ffb9 	bl	8000c62 <SendFailAnsMes>
        return 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e043      	b.n	8000d7c <ParseAndCheckData+0xf0>
    }
    else if(crc != CalculateCheckSumFromMsg(msg))
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f7ff ff4b 	bl	8000b90 <CalculateCheckSumFromMsg>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d004      	beq.n	8000d0e <ParseAndCheckData+0x82>
    {
        SendFailAnsMes(msg);
 8000d04:	6838      	ldr	r0, [r7, #0]
 8000d06:	f7ff ffac 	bl	8000c62 <SendFailAnsMes>
        return 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e036      	b.n	8000d7c <ParseAndCheckData+0xf0>
    }
    else if(msg->pack == SETPIN && (msg->data == SETPIN1 || msg->data == RESETPIN1))
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10c      	bne.n	8000d30 <ParseAndCheckData+0xa4>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	78db      	ldrb	r3, [r3, #3]
 8000d1a:	2b0b      	cmp	r3, #11
 8000d1c:	d003      	beq.n	8000d26 <ParseAndCheckData+0x9a>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d104      	bne.n	8000d30 <ParseAndCheckData+0xa4>
    {
        SendGoodAnsMes(msg);
 8000d26:	6838      	ldr	r0, [r7, #0]
 8000d28:	f7ff ff86 	bl	8000c38 <SendGoodAnsMes>
        return 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e025      	b.n	8000d7c <ParseAndCheckData+0xf0>
    }
    else if(msg->pack == SETPWM50_100 && (msg->data == SETPWM50PIN2 || msg->data == SETPWM100PIN2))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	2b1a      	cmp	r3, #26
 8000d36:	d10c      	bne.n	8000d52 <ParseAndCheckData+0xc6>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	78db      	ldrb	r3, [r3, #3]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d003      	beq.n	8000d48 <ParseAndCheckData+0xbc>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	78db      	ldrb	r3, [r3, #3]
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	d104      	bne.n	8000d52 <ParseAndCheckData+0xc6>
    {
        SendGoodAnsMes(msg);
 8000d48:	6838      	ldr	r0, [r7, #0]
 8000d4a:	f7ff ff75 	bl	8000c38 <SendGoodAnsMes>
        return 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e014      	b.n	8000d7c <ParseAndCheckData+0xf0>
    }
    else if(msg->pack == SETPWMX && (msg->data >= 1 && msg->data <= 10))
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	789b      	ldrb	r3, [r3, #2]
 8000d56:	2b28      	cmp	r3, #40	@ 0x28
 8000d58:	d10c      	bne.n	8000d74 <ParseAndCheckData+0xe8>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	78db      	ldrb	r3, [r3, #3]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d008      	beq.n	8000d74 <ParseAndCheckData+0xe8>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	78db      	ldrb	r3, [r3, #3]
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d804      	bhi.n	8000d74 <ParseAndCheckData+0xe8>
    {
        SendGoodAnsMes(msg);
 8000d6a:	6838      	ldr	r0, [r7, #0]
 8000d6c:	f7ff ff64 	bl	8000c38 <SendGoodAnsMes>
        return 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e003      	b.n	8000d7c <ParseAndCheckData+0xf0>
    }
    else
    {
        SendFailAnsMes(msg);
 8000d74:	6838      	ldr	r0, [r7, #0]
 8000d76:	f7ff ff74 	bl	8000c62 <SendFailAnsMes>
        return 1;
 8000d7a:	2301      	movs	r3, #1
    }

}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <HAL_TIM_Base_MspInit+0x3c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10d      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_TIM_Base_MspInit+0x40>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a09      	ldr	r2, [pc, #36]	@ (8000e14 <HAL_TIM_Base_MspInit+0x40>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <HAL_TIM_Base_MspInit+0x40>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <HAL_TIM_MspPostInit+0x68>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d11d      	bne.n	8000e76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e56:	23c0      	movs	r3, #192	@ 0xc0
 8000e58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <HAL_TIM_MspPostInit+0x70>)
 8000e72:	f000 fb0b 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020800 	.word	0x40020800

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f20 <HAL_UART_MspInit+0x94>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d134      	bne.n	8000f18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ee6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <HAL_UART_MspInit+0x9c>)
 8000f04:	f000 fac2 	bl	800148c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2025      	movs	r0, #37	@ 0x25
 8000f0e:	f000 f9f4 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f12:	2025      	movs	r0, #37	@ 0x25
 8000f14:	f000 fa0d 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	@ 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <NMI_Handler+0x4>

08000f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f89b 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <USART1_IRQHandler+0x10>)
 8000f92:	f001 fffd 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000e8 	.word	0x200000e8

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f002 ff2b 	bl	8003e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fb5b 	bl	80006b0 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001008:	08003f3c 	.word	0x08003f3c
  ldr r2, =_sbss
 800100c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001010:	2000034c 	.word	0x2000034c

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f94f 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fe9a 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f967 	bl	800134e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f92f 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000078 	.word	0x20000078
 80010b4:	20000080 	.word	0x20000080
 80010b8:	2000007c 	.word	0x2000007c

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000080 	.word	0x20000080
 80010e0:	20000348 	.word	0x20000348

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000348 	.word	0x20000348

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000080 	.word	0x20000080

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff feb6 	bl	80010e4 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d008      	beq.n	8001398 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e052      	b.n	800143e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0216 	bic.w	r2, r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <HAL_DMA_Abort+0x62>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0208 	bic.w	r2, r2, #8
 80013d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	e013      	b.n	8001412 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ea:	f7ff fe7b 	bl	80010e4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d90c      	bls.n	8001412 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e015      	b.n	800143e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e4      	bne.n	80013ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001424:	223f      	movs	r2, #63	@ 0x3f
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d004      	beq.n	8001464 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2280      	movs	r2, #128	@ 0x80
 800145e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e00c      	b.n	800147e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e159      	b.n	800175c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 8148 	bne.w	8001756 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d005      	beq.n	80014de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d130      	bne.n	8001540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a2 	beq.w	8001756 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b57      	ldr	r3, [pc, #348]	@ (8001774 <HAL_GPIO_Init+0x2e8>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	4a56      	ldr	r2, [pc, #344]	@ (8001774 <HAL_GPIO_Init+0x2e8>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001620:	6453      	str	r3, [r2, #68]	@ 0x44
 8001622:	4b54      	ldr	r3, [pc, #336]	@ (8001774 <HAL_GPIO_Init+0x2e8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a52      	ldr	r2, [pc, #328]	@ (8001778 <HAL_GPIO_Init+0x2ec>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a49      	ldr	r2, [pc, #292]	@ (800177c <HAL_GPIO_Init+0x2f0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x202>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a48      	ldr	r2, [pc, #288]	@ (8001780 <HAL_GPIO_Init+0x2f4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x1fe>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a47      	ldr	r2, [pc, #284]	@ (8001784 <HAL_GPIO_Init+0x2f8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x1fa>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a46      	ldr	r2, [pc, #280]	@ (8001788 <HAL_GPIO_Init+0x2fc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x1f6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a45      	ldr	r2, [pc, #276]	@ (800178c <HAL_GPIO_Init+0x300>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x1f2>
 800167a:	2304      	movs	r3, #4
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800167e:	2307      	movs	r3, #7
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x204>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x204>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800168e:	2300      	movs	r3, #0
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a0:	4935      	ldr	r1, [pc, #212]	@ (8001778 <HAL_GPIO_Init+0x2ec>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ae:	4b38      	ldr	r3, [pc, #224]	@ (8001790 <HAL_GPIO_Init+0x304>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001790 <HAL_GPIO_Init+0x304>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001790 <HAL_GPIO_Init+0x304>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016fc:	4a24      	ldr	r2, [pc, #144]	@ (8001790 <HAL_GPIO_Init+0x304>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001702:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <HAL_GPIO_Init+0x304>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001726:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_GPIO_Init+0x304>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_GPIO_Init+0x304>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001750:	4a0f      	ldr	r2, [pc, #60]	@ (8001790 <HAL_GPIO_Init+0x304>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3301      	adds	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b0f      	cmp	r3, #15
 8001760:	f67f aea2 	bls.w	80014a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3724      	adds	r7, #36	@ 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400
 8001784:	40020800 	.word	0x40020800
 8001788:	40020c00 	.word	0x40020c00
 800178c:	40021000 	.word	0x40021000
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e267      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d075      	beq.n	80018d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017e6:	4b88      	ldr	r3, [pc, #544]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d00c      	beq.n	800180c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b85      	ldr	r3, [pc, #532]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b82      	ldr	r3, [pc, #520]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800180a:	d10b      	bne.n	8001824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05b      	beq.n	80018d0 <HAL_RCC_OscConfig+0x108>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d157      	bne.n	80018d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e242      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x74>
 800182e:	4b76      	ldr	r3, [pc, #472]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a75      	ldr	r2, [pc, #468]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xb0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x98>
 8001846:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6d      	ldr	r3, [pc, #436]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6c      	ldr	r2, [pc, #432]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xb0>
 8001860:	4b69      	ldr	r3, [pc, #420]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a68      	ldr	r2, [pc, #416]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a65      	ldr	r2, [pc, #404]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fc30 	bl	80010e4 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fc2c 	bl	80010e4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e207      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xc0>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fc1c 	bl	80010e4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fc18 	bl	80010e4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1f3      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b51      	ldr	r3, [pc, #324]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0xe8>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018de:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b44      	ldr	r3, [pc, #272]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b41      	ldr	r3, [pc, #260]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x152>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1c7      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4937      	ldr	r1, [pc, #220]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e03a      	b.n	80019a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <HAL_RCC_OscConfig+0x244>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fbd1 	bl	80010e4 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fbcd 	bl	80010e4 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1a8      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4925      	ldr	r1, [pc, #148]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <HAL_RCC_OscConfig+0x244>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fbb0 	bl	80010e4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fbac 	bl	80010e4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e187      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d036      	beq.n	8001a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_RCC_OscConfig+0x248>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fb90 	bl	80010e4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fb8c 	bl	80010e4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e167      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_RCC_OscConfig+0x240>)
 80019dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x200>
 80019e6:	e01b      	b.n	8001a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_RCC_OscConfig+0x248>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fb79 	bl	80010e4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	e00e      	b.n	8001a14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff fb75 	bl	80010e4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d907      	bls.n	8001a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e150      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	42470000 	.word	0x42470000
 8001a10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a14:	4b88      	ldr	r3, [pc, #544]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1ea      	bne.n	80019f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8097 	beq.w	8001b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b81      	ldr	r3, [pc, #516]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b7d      	ldr	r3, [pc, #500]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a7c      	ldr	r2, [pc, #496]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b77      	ldr	r3, [pc, #476]	@ (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b74      	ldr	r3, [pc, #464]	@ (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a73      	ldr	r2, [pc, #460]	@ (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb35 	bl	80010e4 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fb31 	bl	80010e4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e10c      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b6a      	ldr	r3, [pc, #424]	@ (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2ea>
 8001aa4:	4b64      	ldr	r3, [pc, #400]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa8:	4a63      	ldr	r2, [pc, #396]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x324>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x30c>
 8001aba:	4b5f      	ldr	r3, [pc, #380]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abe:	4a5e      	ldr	r2, [pc, #376]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	4a5b      	ldr	r2, [pc, #364]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x324>
 8001ad4:	4b58      	ldr	r3, [pc, #352]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad8:	4a57      	ldr	r2, [pc, #348]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae0:	4b55      	ldr	r3, [pc, #340]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae4:	4a54      	ldr	r2, [pc, #336]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	f023 0304 	bic.w	r3, r3, #4
 8001aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d015      	beq.n	8001b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff faf6 	bl	80010e4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff faf2 	bl	80010e4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0cb      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0ee      	beq.n	8001afc <HAL_RCC_OscConfig+0x334>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fae0 	bl	80010e4 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff fadc 	bl	80010e4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0b5      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ee      	bne.n	8001b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b39      	ldr	r3, [pc, #228]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	4a38      	ldr	r2, [pc, #224]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a1 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b66:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d05c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d141      	bne.n	8001bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fab0 	bl	80010e4 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff faac 	bl	80010e4 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e087      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	019b      	lsls	r3, r3, #6
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	491b      	ldr	r1, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fa85 	bl	80010e4 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fa81 	bl	80010e4 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e05c      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x416>
 8001bfc:	e054      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fa6e 	bl	80010e4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fa6a 	bl	80010e4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e045      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x444>
 8001c2a:	e03d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e038      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_OscConfig+0x4ec>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d028      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d121      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d11a      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0cc      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b68      	ldr	r3, [pc, #416]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d90c      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b65      	ldr	r3, [pc, #404]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a52      	ldr	r2, [pc, #328]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d044      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d119      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	4b3f      	ldr	r3, [pc, #252]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	4b3b      	ldr	r3, [pc, #236]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e067      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b37      	ldr	r3, [pc, #220]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4934      	ldr	r1, [pc, #208]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f99c 	bl	80010e4 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff f998 	bl	80010e4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e04f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d20c      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	490a      	ldr	r1, [pc, #40]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f8fc 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08003f14 	.word	0x08003f14
 8001e7c:	20000078 	.word	0x20000078
 8001e80:	2000007c 	.word	0x2000007c

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e88:	b090      	sub	sp, #64	@ 0x40
 8001e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9c:	4b59      	ldr	r3, [pc, #356]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	f200 80a1 	bhi.w	8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8001eb6:	e09b      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b53      	ldr	r3, [pc, #332]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ebc:	e09b      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ebe:	4b53      	ldr	r3, [pc, #332]	@ (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ec2:	e098      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ecc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ece:	4b4d      	ldr	r3, [pc, #308]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d028      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4b4a      	ldr	r3, [pc, #296]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001eec:	2100      	movs	r1, #0
 8001eee:	4b47      	ldr	r3, [pc, #284]	@ (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ef0:	fb03 f201 	mul.w	r2, r3, r1
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	fb00 f303 	mul.w	r3, r0, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	4a43      	ldr	r2, [pc, #268]	@ (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001efe:	fba0 1202 	umull	r1, r2, r0, r2
 8001f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f04:	460a      	mov	r2, r1
 8001f06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f10:	2200      	movs	r2, #0
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	61fa      	str	r2, [r7, #28]
 8001f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f1e:	f7fe f95b 	bl	80001d8 <__aeabi_uldivmod>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4613      	mov	r3, r2
 8001f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f2a:	e053      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2c:	4b35      	ldr	r3, [pc, #212]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	2200      	movs	r2, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	617a      	str	r2, [r7, #20]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f3e:	f04f 0b00 	mov.w	fp, #0
 8001f42:	4652      	mov	r2, sl
 8001f44:	465b      	mov	r3, fp
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	0159      	lsls	r1, r3, #5
 8001f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f54:	0150      	lsls	r0, r2, #5
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001f5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f76:	ebb2 0408 	subs.w	r4, r2, r8
 8001f7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	00eb      	lsls	r3, r5, #3
 8001f88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8c:	00e2      	lsls	r2, r4, #3
 8001f8e:	4614      	mov	r4, r2
 8001f90:	461d      	mov	r5, r3
 8001f92:	eb14 030a 	adds.w	r3, r4, sl
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	eb45 030b 	adc.w	r3, r5, fp
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001faa:	4629      	mov	r1, r5
 8001fac:	028b      	lsls	r3, r1, #10
 8001fae:	4621      	mov	r1, r4
 8001fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	028a      	lsls	r2, r1, #10
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc8:	f7fe f906 	bl	80001d8 <__aeabi_uldivmod>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001fe4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3740      	adds	r7, #64	@ 0x40
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	00f42400 	.word	0x00f42400
 800200c:	017d7840 	.word	0x017d7840

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <HAL_RCC_GetHCLKFreq+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000078 	.word	0x20000078

08002028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800202c:	f7ff fff0 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	@ (800204c <HAL_RCC_GetPCLK1Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	08003f24 	.word	0x08003f24

08002050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002054:	f7ff ffdc 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0b5b      	lsrs	r3, r3, #13
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	@ (8002074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08003f24 	.word	0x08003f24

08002078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e041      	b.n	800210e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fe98 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f000 fb24 	bl	8002704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e041      	b.n	80021ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f839 	bl	80021b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f000 fad5 	bl	8002704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_TIM_PWM_Start+0x24>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e022      	b.n	8002232 <HAL_TIM_PWM_Start+0x6a>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d109      	bne.n	8002206 <HAL_TIM_PWM_Start+0x3e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	e015      	b.n	8002232 <HAL_TIM_PWM_Start+0x6a>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d109      	bne.n	8002220 <HAL_TIM_PWM_Start+0x58>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e008      	b.n	8002232 <HAL_TIM_PWM_Start+0x6a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	bf14      	ite	ne
 800222c:	2301      	movne	r3, #1
 800222e:	2300      	moveq	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e068      	b.n	800230c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d104      	bne.n	800224a <HAL_TIM_PWM_Start+0x82>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002248:	e013      	b.n	8002272 <HAL_TIM_PWM_Start+0xaa>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d104      	bne.n	800225a <HAL_TIM_PWM_Start+0x92>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002258:	e00b      	b.n	8002272 <HAL_TIM_PWM_Start+0xaa>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d104      	bne.n	800226a <HAL_TIM_PWM_Start+0xa2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002268:	e003      	b.n	8002272 <HAL_TIM_PWM_Start+0xaa>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2201      	movs	r2, #1
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fcf4 	bl	8002c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <HAL_TIM_PWM_Start+0x14c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d107      	bne.n	800229a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1d      	ldr	r2, [pc, #116]	@ (8002314 <HAL_TIM_PWM_Start+0x14c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x10e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ac:	d013      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x10e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <HAL_TIM_PWM_Start+0x150>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x10e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HAL_TIM_PWM_Start+0x154>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x10e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <HAL_TIM_PWM_Start+0x158>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x10e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <HAL_TIM_PWM_Start+0x15c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d111      	bne.n	80022fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d010      	beq.n	800230a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	e007      	b.n	800230a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40014000 	.word	0x40014000

08002328 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fc94 	bl	8002c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a29      	ldr	r2, [pc, #164]	@ (80023ec <HAL_TIM_PWM_Stop+0xc4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d117      	bne.n	800237a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10f      	bne.n	800237a <HAL_TIM_PWM_Stop+0x52>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	f240 4344 	movw	r3, #1092	@ 0x444
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_TIM_PWM_Stop+0x52>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10f      	bne.n	80023aa <HAL_TIM_PWM_Stop+0x82>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	f240 4344 	movw	r3, #1092	@ 0x444
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <HAL_TIM_PWM_Stop+0x82>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Stop+0x92>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b8:	e013      	b.n	80023e2 <HAL_TIM_PWM_Stop+0xba>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Stop+0xa2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c8:	e00b      	b.n	80023e2 <HAL_TIM_PWM_Stop+0xba>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Stop+0xb2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023d8:	e003      	b.n	80023e2 <HAL_TIM_PWM_Stop+0xba>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40010000 	.word	0x40010000

080023f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800240a:	2302      	movs	r3, #2
 800240c:	e0ae      	b.n	800256c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	f200 809f 	bhi.w	800255c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800241e:	a201      	add	r2, pc, #4	@ (adr r2, 8002424 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	08002459 	.word	0x08002459
 8002428:	0800255d 	.word	0x0800255d
 800242c:	0800255d 	.word	0x0800255d
 8002430:	0800255d 	.word	0x0800255d
 8002434:	08002499 	.word	0x08002499
 8002438:	0800255d 	.word	0x0800255d
 800243c:	0800255d 	.word	0x0800255d
 8002440:	0800255d 	.word	0x0800255d
 8002444:	080024db 	.word	0x080024db
 8002448:	0800255d 	.word	0x0800255d
 800244c:	0800255d 	.word	0x0800255d
 8002450:	0800255d 	.word	0x0800255d
 8002454:	0800251b 	.word	0x0800251b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f9dc 	bl	800281c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0208 	orr.w	r2, r2, #8
 8002472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0204 	bic.w	r2, r2, #4
 8002482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6999      	ldr	r1, [r3, #24]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	619a      	str	r2, [r3, #24]
      break;
 8002496:	e064      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fa22 	bl	80028e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6999      	ldr	r1, [r3, #24]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	021a      	lsls	r2, r3, #8
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	619a      	str	r2, [r3, #24]
      break;
 80024d8:	e043      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fa6d 	bl	80029c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0208 	orr.w	r2, r2, #8
 80024f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0204 	bic.w	r2, r2, #4
 8002504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69d9      	ldr	r1, [r3, #28]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	61da      	str	r2, [r3, #28]
      break;
 8002518:	e023      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fab7 	bl	8002a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69d9      	ldr	r1, [r3, #28]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	021a      	lsls	r2, r3, #8
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	61da      	str	r2, [r3, #28]
      break;
 800255a:	e002      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
      break;
 8002560:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_TIM_ConfigClockSource+0x1c>
 800258c:	2302      	movs	r3, #2
 800258e:	e0b4      	b.n	80026fa <HAL_TIM_ConfigClockSource+0x186>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c8:	d03e      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0xd4>
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ce:	f200 8087 	bhi.w	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d6:	f000 8086 	beq.w	80026e6 <HAL_TIM_ConfigClockSource+0x172>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025de:	d87f      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b70      	cmp	r3, #112	@ 0x70
 80025e2:	d01a      	beq.n	800261a <HAL_TIM_ConfigClockSource+0xa6>
 80025e4:	2b70      	cmp	r3, #112	@ 0x70
 80025e6:	d87b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b60      	cmp	r3, #96	@ 0x60
 80025ea:	d050      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x11a>
 80025ec:	2b60      	cmp	r3, #96	@ 0x60
 80025ee:	d877      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b50      	cmp	r3, #80	@ 0x50
 80025f2:	d03c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0xfa>
 80025f4:	2b50      	cmp	r3, #80	@ 0x50
 80025f6:	d873      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b40      	cmp	r3, #64	@ 0x40
 80025fa:	d058      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x13a>
 80025fc:	2b40      	cmp	r3, #64	@ 0x40
 80025fe:	d86f      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b30      	cmp	r3, #48	@ 0x30
 8002602:	d064      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 8002604:	2b30      	cmp	r3, #48	@ 0x30
 8002606:	d86b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d060      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b20      	cmp	r3, #32
 800260e:	d867      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05c      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 8002614:	2b10      	cmp	r3, #16
 8002616:	d05a      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 8002618:	e062      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800262a:	f000 fafd 	bl	8002c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800263c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	609a      	str	r2, [r3, #8]
      break;
 8002646:	e04f      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002658:	f000 fae6 	bl	8002c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800266a:	609a      	str	r2, [r3, #8]
      break;
 800266c:	e03c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267a:	461a      	mov	r2, r3
 800267c:	f000 fa5a 	bl	8002b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2150      	movs	r1, #80	@ 0x50
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fab3 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 800268c:	e02c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800269a:	461a      	mov	r2, r3
 800269c:	f000 fa79 	bl	8002b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2160      	movs	r1, #96	@ 0x60
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 faa3 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 80026ac:	e01c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ba:	461a      	mov	r2, r3
 80026bc:	f000 fa3a 	bl	8002b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2140      	movs	r1, #64	@ 0x40
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fa93 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 80026cc:	e00c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f000 fa8a 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 80026de:	e003      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      break;
 80026e4:	e000      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3a      	ldr	r2, [pc, #232]	@ (8002800 <TIM_Base_SetConfig+0xfc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00f      	beq.n	800273c <TIM_Base_SetConfig+0x38>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002722:	d00b      	beq.n	800273c <TIM_Base_SetConfig+0x38>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a37      	ldr	r2, [pc, #220]	@ (8002804 <TIM_Base_SetConfig+0x100>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <TIM_Base_SetConfig+0x38>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <TIM_Base_SetConfig+0x104>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <TIM_Base_SetConfig+0x38>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a35      	ldr	r2, [pc, #212]	@ (800280c <TIM_Base_SetConfig+0x108>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2b      	ldr	r2, [pc, #172]	@ (8002800 <TIM_Base_SetConfig+0xfc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01b      	beq.n	800278e <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275c:	d017      	beq.n	800278e <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a28      	ldr	r2, [pc, #160]	@ (8002804 <TIM_Base_SetConfig+0x100>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a27      	ldr	r2, [pc, #156]	@ (8002808 <TIM_Base_SetConfig+0x104>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00f      	beq.n	800278e <TIM_Base_SetConfig+0x8a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a26      	ldr	r2, [pc, #152]	@ (800280c <TIM_Base_SetConfig+0x108>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00b      	beq.n	800278e <TIM_Base_SetConfig+0x8a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a25      	ldr	r2, [pc, #148]	@ (8002810 <TIM_Base_SetConfig+0x10c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <TIM_Base_SetConfig+0x8a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <TIM_Base_SetConfig+0x110>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_Base_SetConfig+0x8a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a23      	ldr	r2, [pc, #140]	@ (8002818 <TIM_Base_SetConfig+0x114>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002800 <TIM_Base_SetConfig+0xfc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d103      	bne.n	80027d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d105      	bne.n	80027f2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f023 0201 	bic.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]
  }
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40014000 	.word	0x40014000
 8002814:	40014400 	.word	0x40014400
 8002818:	40014800 	.word	0x40014800

0800281c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 0201 	bic.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 0302 	bic.w	r3, r3, #2
 8002864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <TIM_OC1_SetConfig+0xc8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10c      	bne.n	8002892 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f023 0308 	bic.w	r3, r3, #8
 800287e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <TIM_OC1_SetConfig+0xc8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d111      	bne.n	80028be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40010000 	.word	0x40010000

080028e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f023 0210 	bic.w	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0320 	bic.w	r3, r3, #32
 8002932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a1e      	ldr	r2, [pc, #120]	@ (80029bc <TIM_OC2_SetConfig+0xd4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10d      	bne.n	8002964 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800294e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002962:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a15      	ldr	r2, [pc, #84]	@ (80029bc <TIM_OC2_SetConfig+0xd4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d113      	bne.n	8002994 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800297a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40010000 	.word	0x40010000

080029c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <TIM_OC3_SetConfig+0xd0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10d      	bne.n	8002a3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a14      	ldr	r2, [pc, #80]	@ (8002a90 <TIM_OC3_SetConfig+0xd0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d113      	bne.n	8002a6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	621a      	str	r2, [r3, #32]
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40010000 	.word	0x40010000

08002a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	031b      	lsls	r3, r3, #12
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a10      	ldr	r2, [pc, #64]	@ (8002b30 <TIM_OC4_SetConfig+0x9c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d109      	bne.n	8002b08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000

08002b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f023 0201 	bic.w	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 030a 	bic.w	r3, r3, #10
 8002b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f023 0210 	bic.w	r2, r3, #16
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	031b      	lsls	r3, r3, #12
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f043 0307 	orr.w	r3, r3, #7
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	021a      	lsls	r2, r3, #8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e050      	b.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d18:	d013      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a18      	ldr	r2, [pc, #96]	@ (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a16      	ldr	r2, [pc, #88]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10c      	bne.n	8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40014000 	.word	0x40014000

08002d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e042      	b.n	8002e28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe f868 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	@ 0x24
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fdbd 	bl	8003954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d175      	bne.n	8002f3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_UART_Transmit+0x2c>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e06e      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2221      	movs	r2, #33	@ 0x21
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6e:	f7fe f939 	bl	80010e4 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e88:	d108      	bne.n	8002e9c <HAL_UART_Transmit+0x6c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e003      	b.n	8002ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ea4:	e02e      	b.n	8002f04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2180      	movs	r1, #128	@ 0x80
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fb1f 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e03a      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e007      	b.n	8002ef6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1cb      	bne.n	8002ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2140      	movs	r1, #64	@ 0x40
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 faeb 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e006      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	4613      	mov	r3, r2
 8002f52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d112      	bne.n	8002f86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Receive_IT+0x26>
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e00b      	b.n	8002f88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fb12 	bl	80035a6 <UART_Start_Receive_IT>
 8002f82:	4603      	mov	r3, r0
 8002f84:	e000      	b.n	8002f88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	@ 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fbf2 	bl	80037d8 <UART_Receive_IT>
      return;
 8002ff4:	e25b      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80de 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003010:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80d1 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81f2 	beq.w	80034a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb7d 	bl	80037d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b40      	cmp	r3, #64	@ 0x40
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_UART_IRQHandler+0x17a>
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04f      	beq.n	80031aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa85 	bl	800361a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	2b40      	cmp	r3, #64	@ 0x40
 800311c:	d141      	bne.n	80031a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800313c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800314a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003176:	4a7e      	ldr	r2, [pc, #504]	@ (8003370 <HAL_UART_IRQHandler+0x3e0>)
 8003178:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe f961 	bl	8001446 <HAL_DMA_Abort_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00e      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f994 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00a      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f990 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e006      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f98c 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031b6:	e175      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	bf00      	nop
    return;
 80031ba:	e173      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 814f 	bne.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8148 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8141 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003202:	2b40      	cmp	r3, #64	@ 0x40
 8003204:	f040 80b6 	bne.w	8003374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8145 	beq.w	80034a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003226:	429a      	cmp	r2, r3
 8003228:	f080 813e 	bcs.w	80034a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003232:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323e:	f000 8088 	beq.w	8003352 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800325c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003260:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800326e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800327a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1d9      	bne.n	8003242 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800329e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e1      	bne.n	800328e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3314      	adds	r3, #20
 80032d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3314      	adds	r3, #20
 80032ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e3      	bne.n	80032ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003322:	f023 0310 	bic.w	r3, r3, #16
 8003326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003334:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003336:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800333a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e3      	bne.n	8003310 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe f80a 	bl	8001366 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8b7 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800336e:	e09b      	b.n	80034a8 <HAL_UART_IRQHandler+0x518>
 8003370:	080036e1 	.word	0x080036e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 808e 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8089 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033be:	647a      	str	r2, [r7, #68]	@ 0x44
 80033c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60fb      	str	r3, [r7, #12]
   return(result);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	617b      	str	r3, [r7, #20]
   return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e3      	bne.n	8003418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f83d 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003462:	e023      	b.n	80034ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f943 	bl	8003708 <UART_Transmit_IT>
    return;
 8003482:	e014      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f983 	bl	80037a8 <UART_EndTransmit_IT>
    return;
 80034a2:	e004      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    return;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034ac:	bf00      	nop
  }
}
 80034ae:	37e8      	adds	r7, #232	@ 0xe8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003504:	e03b      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d037      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fd fde9 	bl	80010e4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	6a3a      	ldr	r2, [r7, #32]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <UART_WaitOnFlagUntilTimeout+0x30>
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e03a      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d023      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b80      	cmp	r3, #128	@ 0x80
 800353a:	d020      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d01d      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d116      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f857 	bl	800361a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2208      	movs	r2, #8
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e00f      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d0b4      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	4613      	mov	r3, r2
 80035b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2222      	movs	r2, #34	@ 0x22
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800361a:	b480      	push	{r7}
 800361c:	b095      	sub	sp, #84	@ 0x54
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003642:	643a      	str	r2, [r7, #64]	@ 0x40
 8003644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e5      	bne.n	8003622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	61fb      	str	r3, [r7, #28]
   return(result);
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3314      	adds	r3, #20
 8003674:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800367c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	2b01      	cmp	r3, #1
 8003690:	d119      	bne.n	80036c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0310 	bic.w	r3, r3, #16
 80036a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036b2:	61ba      	str	r2, [r7, #24]
 80036b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6979      	ldr	r1, [r7, #20]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	613b      	str	r3, [r7, #16]
   return(result);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036d4:	bf00      	nop
 80036d6:	3754      	adds	r7, #84	@ 0x54
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fee4 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b21      	cmp	r3, #33	@ 0x21
 800371a:	d13e      	bne.n	800379a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003724:	d114      	bne.n	8003750 <UART_Transmit_IT+0x48>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d110      	bne.n	8003750 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003742:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	1c9a      	adds	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	621a      	str	r2, [r3, #32]
 800374e:	e008      	b.n	8003762 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	1c59      	adds	r1, r3, #1
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6211      	str	r1, [r2, #32]
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29b      	uxth	r3, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4619      	mov	r1, r3
 8003770:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fe73 	bl	80034b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	@ 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b22      	cmp	r3, #34	@ 0x22
 80037ea:	f040 80ae 	bne.w	800394a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f6:	d117      	bne.n	8003828 <UART_Receive_IT+0x50>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d113      	bne.n	8003828 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003800:	2300      	movs	r3, #0
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	b29a      	uxth	r2, r3
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	629a      	str	r2, [r3, #40]	@ 0x28
 8003826:	e026      	b.n	8003876 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383a:	d007      	beq.n	800384c <UART_Receive_IT+0x74>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <UART_Receive_IT+0x82>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e008      	b.n	800386c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003866:	b2da      	uxtb	r2, r3
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4619      	mov	r1, r3
 8003884:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003886:	2b00      	cmp	r3, #0
 8003888:	d15d      	bne.n	8003946 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0220 	bic.w	r2, r2, #32
 8003898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d135      	bne.n	800393c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	613b      	str	r3, [r7, #16]
   return(result);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f023 0310 	bic.w	r3, r3, #16
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	623a      	str	r2, [r7, #32]
 80038f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	61bb      	str	r3, [r7, #24]
   return(result);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e5      	bne.n	80038d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b10      	cmp	r3, #16
 8003916:	d10a      	bne.n	800392e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fdd1 	bl	80034dc <HAL_UARTEx_RxEventCallback>
 800393a:	e002      	b.n	8003942 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd f891 	bl	8000a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e002      	b.n	800394c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
  }
}
 800394c:	4618      	mov	r0, r3
 800394e:	3730      	adds	r7, #48	@ 0x30
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003958:	b0c0      	sub	sp, #256	@ 0x100
 800395a:	af00      	add	r7, sp, #0
 800395c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	68d9      	ldr	r1, [r3, #12]
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	ea40 0301 	orr.w	r3, r0, r1
 800397c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	431a      	orrs	r2, r3
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	431a      	orrs	r2, r3
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039ac:	f021 010c 	bic.w	r1, r1, #12
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039ba:	430b      	orrs	r3, r1
 80039bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	6999      	ldr	r1, [r3, #24]
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	ea40 0301 	orr.w	r3, r0, r1
 80039da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003c20 <UART_SetConfig+0x2cc>)
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d005      	beq.n	80039f4 <UART_SetConfig+0xa0>
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003c24 <UART_SetConfig+0x2d0>)
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d104      	bne.n	80039fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f4:	f7fe fb2c 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 80039f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039fc:	e003      	b.n	8003a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039fe:	f7fe fb13 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 8003a02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a10:	f040 810c 	bne.w	8003c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	1891      	adds	r1, r2, r2
 8003a2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a2e:	415b      	adcs	r3, r3
 8003a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a36:	4621      	mov	r1, r4
 8003a38:	eb12 0801 	adds.w	r8, r2, r1
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	eb43 0901 	adc.w	r9, r3, r1
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a56:	4690      	mov	r8, r2
 8003a58:	4699      	mov	r9, r3
 8003a5a:	4623      	mov	r3, r4
 8003a5c:	eb18 0303 	adds.w	r3, r8, r3
 8003a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a64:	462b      	mov	r3, r5
 8003a66:	eb49 0303 	adc.w	r3, r9, r3
 8003a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a82:	460b      	mov	r3, r1
 8003a84:	18db      	adds	r3, r3, r3
 8003a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a88:	4613      	mov	r3, r2
 8003a8a:	eb42 0303 	adc.w	r3, r2, r3
 8003a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a98:	f7fc fb9e 	bl	80001d8 <__aeabi_uldivmod>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4b61      	ldr	r3, [pc, #388]	@ (8003c28 <UART_SetConfig+0x2d4>)
 8003aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	011c      	lsls	r4, r3, #4
 8003aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003abc:	4642      	mov	r2, r8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	1891      	adds	r1, r2, r2
 8003ac2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ac4:	415b      	adcs	r3, r3
 8003ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003acc:	4641      	mov	r1, r8
 8003ace:	eb12 0a01 	adds.w	sl, r2, r1
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aec:	4692      	mov	sl, r2
 8003aee:	469b      	mov	fp, r3
 8003af0:	4643      	mov	r3, r8
 8003af2:	eb1a 0303 	adds.w	r3, sl, r3
 8003af6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003afa:	464b      	mov	r3, r9
 8003afc:	eb4b 0303 	adc.w	r3, fp, r3
 8003b00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	18db      	adds	r3, r3, r3
 8003b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b1e:	4613      	mov	r3, r2
 8003b20:	eb42 0303 	adc.w	r3, r2, r3
 8003b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b2e:	f7fc fb53 	bl	80001d8 <__aeabi_uldivmod>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <UART_SetConfig+0x2d4>)
 8003b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2264      	movs	r2, #100	@ 0x64
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	1acb      	subs	r3, r1, r3
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b4e:	4b36      	ldr	r3, [pc, #216]	@ (8003c28 <UART_SetConfig+0x2d4>)
 8003b50:	fba3 2302 	umull	r2, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b5c:	441c      	add	r4, r3
 8003b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b70:	4642      	mov	r2, r8
 8003b72:	464b      	mov	r3, r9
 8003b74:	1891      	adds	r1, r2, r2
 8003b76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b78:	415b      	adcs	r3, r3
 8003b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b80:	4641      	mov	r1, r8
 8003b82:	1851      	adds	r1, r2, r1
 8003b84:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b86:	4649      	mov	r1, r9
 8003b88:	414b      	adcs	r3, r1
 8003b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b98:	4659      	mov	r1, fp
 8003b9a:	00cb      	lsls	r3, r1, #3
 8003b9c:	4651      	mov	r1, sl
 8003b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	00ca      	lsls	r2, r1, #3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	4642      	mov	r2, r8
 8003bae:	189b      	adds	r3, r3, r2
 8003bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bb4:	464b      	mov	r3, r9
 8003bb6:	460a      	mov	r2, r1
 8003bb8:	eb42 0303 	adc.w	r3, r2, r3
 8003bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	18db      	adds	r3, r3, r3
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bda:	4613      	mov	r3, r2
 8003bdc:	eb42 0303 	adc.w	r3, r2, r3
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bea:	f7fc faf5 	bl	80001d8 <__aeabi_uldivmod>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <UART_SetConfig+0x2d4>)
 8003bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	2164      	movs	r1, #100	@ 0x64
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	3332      	adds	r3, #50	@ 0x32
 8003c06:	4a08      	ldr	r2, [pc, #32]	@ (8003c28 <UART_SetConfig+0x2d4>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	f003 0207 	and.w	r2, r3, #7
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4422      	add	r2, r4
 8003c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c1c:	e106      	b.n	8003e2c <UART_SetConfig+0x4d8>
 8003c1e:	bf00      	nop
 8003c20:	40011000 	.word	0x40011000
 8003c24:	40011400 	.word	0x40011400
 8003c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c3e:	4642      	mov	r2, r8
 8003c40:	464b      	mov	r3, r9
 8003c42:	1891      	adds	r1, r2, r2
 8003c44:	6239      	str	r1, [r7, #32]
 8003c46:	415b      	adcs	r3, r3
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c4e:	4641      	mov	r1, r8
 8003c50:	1854      	adds	r4, r2, r1
 8003c52:	4649      	mov	r1, r9
 8003c54:	eb43 0501 	adc.w	r5, r3, r1
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	00eb      	lsls	r3, r5, #3
 8003c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c66:	00e2      	lsls	r2, r4, #3
 8003c68:	4614      	mov	r4, r2
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	4643      	mov	r3, r8
 8003c6e:	18e3      	adds	r3, r4, r3
 8003c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c74:	464b      	mov	r3, r9
 8003c76:	eb45 0303 	adc.w	r3, r5, r3
 8003c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	008b      	lsls	r3, r1, #2
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	008a      	lsls	r2, r1, #2
 8003ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cac:	f7fc fa94 	bl	80001d8 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4b60      	ldr	r3, [pc, #384]	@ (8003e38 <UART_SetConfig+0x4e4>)
 8003cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	011c      	lsls	r4, r3, #4
 8003cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	61b9      	str	r1, [r7, #24]
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	1851      	adds	r1, r2, r1
 8003ce4:	6139      	str	r1, [r7, #16]
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	414b      	adcs	r3, r1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf8:	4659      	mov	r1, fp
 8003cfa:	00cb      	lsls	r3, r1, #3
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d02:	4651      	mov	r1, sl
 8003d04:	00ca      	lsls	r2, r1, #3
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d14:	464b      	mov	r3, r9
 8003d16:	460a      	mov	r2, r1
 8003d18:	eb42 0303 	adc.w	r3, r2, r3
 8003d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d38:	4649      	mov	r1, r9
 8003d3a:	008b      	lsls	r3, r1, #2
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d42:	4641      	mov	r1, r8
 8003d44:	008a      	lsls	r2, r1, #2
 8003d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d4a:	f7fc fa45 	bl	80001d8 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	4b38      	ldr	r3, [pc, #224]	@ (8003e38 <UART_SetConfig+0x4e4>)
 8003d56:	fba3 2301 	umull	r2, r3, r3, r1
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2264      	movs	r2, #100	@ 0x64
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	1acb      	subs	r3, r1, r3
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	3332      	adds	r3, #50	@ 0x32
 8003d68:	4a33      	ldr	r2, [pc, #204]	@ (8003e38 <UART_SetConfig+0x4e4>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d74:	441c      	add	r4, r3
 8003d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d84:	4642      	mov	r2, r8
 8003d86:	464b      	mov	r3, r9
 8003d88:	1891      	adds	r1, r2, r2
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d94:	4641      	mov	r1, r8
 8003d96:	1851      	adds	r1, r2, r1
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	414b      	adcs	r3, r1
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dac:	4659      	mov	r1, fp
 8003dae:	00cb      	lsls	r3, r1, #3
 8003db0:	4651      	mov	r1, sl
 8003db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db6:	4651      	mov	r1, sl
 8003db8:	00ca      	lsls	r2, r1, #3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	460a      	mov	r2, r1
 8003dca:	eb42 0303 	adc.w	r3, r2, r3
 8003dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003de8:	4649      	mov	r1, r9
 8003dea:	008b      	lsls	r3, r1, #2
 8003dec:	4641      	mov	r1, r8
 8003dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df2:	4641      	mov	r1, r8
 8003df4:	008a      	lsls	r2, r1, #2
 8003df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dfa:	f7fc f9ed 	bl	80001d8 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <UART_SetConfig+0x4e4>)
 8003e04:	fba3 1302 	umull	r1, r3, r3, r2
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	2164      	movs	r1, #100	@ 0x64
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	3332      	adds	r3, #50	@ 0x32
 8003e16:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <UART_SetConfig+0x4e4>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	f003 020f 	and.w	r2, r3, #15
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4422      	add	r2, r4
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e32:	46bd      	mov	sp, r7
 8003e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e38:	51eb851f 	.word	0x51eb851f

08003e3c <memset>:
 8003e3c:	4402      	add	r2, r0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d100      	bne.n	8003e46 <memset+0xa>
 8003e44:	4770      	bx	lr
 8003e46:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4a:	e7f9      	b.n	8003e40 <memset+0x4>

08003e4c <__libc_init_array>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e84 <__libc_init_array+0x38>)
 8003e50:	4c0d      	ldr	r4, [pc, #52]	@ (8003e88 <__libc_init_array+0x3c>)
 8003e52:	1b64      	subs	r4, r4, r5
 8003e54:	10a4      	asrs	r4, r4, #2
 8003e56:	2600      	movs	r6, #0
 8003e58:	42a6      	cmp	r6, r4
 8003e5a:	d109      	bne.n	8003e70 <__libc_init_array+0x24>
 8003e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e8c <__libc_init_array+0x40>)
 8003e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e90 <__libc_init_array+0x44>)
 8003e60:	f000 f818 	bl	8003e94 <_init>
 8003e64:	1b64      	subs	r4, r4, r5
 8003e66:	10a4      	asrs	r4, r4, #2
 8003e68:	2600      	movs	r6, #0
 8003e6a:	42a6      	cmp	r6, r4
 8003e6c:	d105      	bne.n	8003e7a <__libc_init_array+0x2e>
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e74:	4798      	blx	r3
 8003e76:	3601      	adds	r6, #1
 8003e78:	e7ee      	b.n	8003e58 <__libc_init_array+0xc>
 8003e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7e:	4798      	blx	r3
 8003e80:	3601      	adds	r6, #1
 8003e82:	e7f2      	b.n	8003e6a <__libc_init_array+0x1e>
 8003e84:	08003f34 	.word	0x08003f34
 8003e88:	08003f34 	.word	0x08003f34
 8003e8c:	08003f34 	.word	0x08003f34
 8003e90:	08003f38 	.word	0x08003f38

08003e94 <_init>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	bf00      	nop
 8003e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	469e      	mov	lr, r3
 8003e9e:	4770      	bx	lr

08003ea0 <_fini>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr
